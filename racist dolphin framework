local library = {flags = {}, windows = {}, open = true, options = 0}

--Services
local runService = game:GetService"RunService"
local tweenService = game:GetService"TweenService"
local textService = game:GetService"TextService"
local inputService = game:GetService"UserInputService"

--Locals
local dragging, dragInput, dragStart, startPos, dragObject

local blacklistedKeys = { --add or remove keys if you find the need to
	Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape
}
local whitelistedMouseinputs = { --add or remove mouse inputs if you find the need to
	Enum.UserInputType.MouseButton1,Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3
}

--Functions
local function round(num, bracket)
	bracket = bracket or 1
	local a = math.floor(num/bracket + (math.sign(num) * 0.5)) * bracket
	if a < 0 then
		a = a + bracket
	end
	return a
end

local function keyCheck(x,x1)
	for _,v in next, x1 do
		if v == x then
			return true
		end
	end
end

local function update(input)
	local delta = input.Position - dragStart
	local yPos = (startPos.Y.Offset + delta.Y) < -36 and -36 or startPos.Y.Offset + delta.Y
	dragObject:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quint", 0.1, true)
end

--From: https://devforum.roblox.com/t/how-to-create-a-simple-rainbow-effect-using-tweenService/221849/2
local chromaColor
local rainbowTime = 5
spawn(function()
	while wait() do
		chromaColor = Color3.fromHSV(tick() % rainbowTime / rainbowTime, 1, 1)
	end
end)

function library:Create(class, properties)
	properties = typeof(properties) == "table" and properties or {}
	local inst = Instance.new(class)
	for property, value in next, properties do
		inst[property] = value
	end
	return inst
end

local function createOptionHolder(holderTitle, parent, parentTable, subHolder)
	local size = subHolder and 20 or 30
	parentTable.main = library:Create("Frame", {
		LayoutOrder = subHolder and parentTable.position or 0,
		Position = UDim2.new(0, 20 + (250 * (parentTable.position or 0)), 0, 20),
		Size = UDim2.new(0, 230, 0, size),
		BackgroundTransparency = 1,
		BackgroundColor3 = Color3.fromRGB(0, 0, 0),
		BorderSizePixel = 3,
		BorderColor3 = Color3.new(0, 0, 139 / 255),
		ClipsDescendants = false,
		Parent = parent
	})
	
	local round
	if not subHolder then
		round = library:Create("Frame", {
			Size = UDim2.new(1, 0, 0, size),
			BackgroundTransparency = 1,
			BorderColor3 = Color3.new(0, 0, 139 / 255),
			BorderSizePixel = 3,
			BackgroundColor3 = Color3.fromRGB(0, 0, 0),
			Parent = parentTable.main
		})
	end
	
	local title = library:Create("TextLabel", {
		Size = UDim2.new(1, 0, 0, size),
		BackgroundTransparency = 0.3 ,
		BackgroundColor3 = Color3.fromRGB(0, 0, 0),
		BorderSizePixel = 3,
		BorderColor3 = Color3.new(0, 0, 139 / 255),
		Text = holderTitle,
		TextSize = subHolder and 16 or 17,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Parent = parentTable.main
	})
	
	parentTable.content = library:Create("Frame", {
		BackgroundColor3 = Color3.fromRGB(0,0,0),
		Position = UDim2.new(0, 0, 0, size+10),
		Size = UDim2.new(1, 0, 1, -size),
		BackgroundTransparency = 0.3,
		BorderColor3 = Color3.new(0, 0, 139 / 255),
		BorderSizePixel = 3,
		Parent = parentTable.main,
	})
	
	local layout = library:Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = parentTable.content
	})
	
	layout.Changed:connect(function()
		parentTable.content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
		parentTable.main.Size = #parentTable.options > 0 and parentTable.open and UDim2.new(0, 230, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 230, 0, size)
	end)
	
	if not subHolder then
		library:Create("UIPadding", {
			Parent = parentTable.content
		})
		
		title.InputBegan:connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragObject = parentTable.main
				dragging = true
				dragStart = input.Position
				startPos = dragObject.Position
			end
		end)
		title.InputChanged:connect(function(input)
			if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
				dragInput = input
			end
		end)
		title.InputEnded:connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = false
			end
		end)
	end
	
	function parentTable:SetTitle(newTitle)
		title.Text = tostring(newTitle)
	end
	
	return parentTable
end

local function createLabel(option, parent)
	local main = library:Create("TextLabel", {
		LayoutOrder = option.position,
		Size = UDim2.new(1, 0, 0, 26),
		BackgroundTransparency = 1,
		Text = " " .. option.text,
		TextSize = 17,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = parent.content
	})
	
	setmetatable(option, {__newindex = function(t, i, v)
			if i == "Text" then
				main.Text = " " .. tostring(v)
			end
		end})
end

local function createDesc(option, parent)
	local main = library:Create("TextLabel", {
		LayoutOrder = option.position,
		Size = UDim2.new(1, 0, 0, 26),
		BackgroundTransparency = 0.3 ,
		BackgroundColor3 = Color3.fromRGB(0, 0, 0),
		BorderSizePixel = 3,
		BorderColor3 = Color3.new(0, 0, 139 / 255),
		Text = "Press the \"P\" key to toggle the GUI\nMade by: @Racist Dolphin#8943",
		TextScaled = true,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = parent.content
	})
	
	setmetatable(option, {__newindex = function(t, i, v)
			if i == "Text" then
				main.Text = " " .. tostring(v)
			end
		end})
end

function createToggle(option, parent)
	local main = library:Create("TextLabel", {
		LayoutOrder = option.position,
		Size = UDim2.new(1, 0, 0, 31),
		BackgroundTransparency = 1,
		Text = " " .. option.text,
		TextSize = 17,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = parent.content
	})
	
	local Toggle = library:Create("TextButton", {
		LayoutOrder = option.position,
		Position = UDim2.new(0, 230, 0, 4),
		Size = UDim2.new(0, -230,1, -8),
		BackgroundTransparency = 1,
		Text = "OFF",
		TextSize = 17,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 0, 0),
		TextXAlignment = Enum.TextXAlignment.Right,
		Parent = main
	})
	local inContact
	
	Toggle.MouseButton1Down:Connect(function()
		option.state = not option.state
		if option.state then
			Toggle.Text = "ON"
			Toggle.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			Toggle.Text = "OFF"
			Toggle.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
		library.flags[option.flag] = option.state
		option.state = option.state
		option.callback(option.state)
	end)
	
	if option.state then
		delay(1, function() option.callback(true) end)
	end
	
	setmetatable(option, {__newindex = function(t, i, v)
			if i == "Text" then
				main.Text = " " .. tostring(v)
			end
		end})
end

function createButton(option, parent)
	local main = library:Create("TextButton", {
		LayoutOrder = option.position,
		Size = UDim2.new(1, 0, 0, 26),
		BackgroundTransparency = 1,
		Text = " " .. option.text,
		TextSize = 17,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = parent.content
	})
	
	main.MouseButton1Down:Connect(function()
		option.callback(option.state)
	end)
end

local function createBox(option, parent)
	local inputvalue = library:Create("TextBox", {
		Position = UDim2.new(0, 12, 0, 20),
		Size = UDim2.new(0, 226,0, 20),
		BackgroundTransparency = 0.3,
		BorderSizePixel = 0,
		BackgroundColor3 = Color3.new(66 / 255, 66 / 255, 66 / 255),
		PlaceholderText = option.text,
		PlaceholderColor3 = Color3.new(1, 1, 1),
		Text = option.value,
		TextSize = 18,
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = true,
		Parent = parent.content
	})
	
	local inContact
	local focused
	
	inputvalue.FocusLost:connect(function(enter)
		focused = false
		option:SetValue(inputvalue.Text, enter)
	end)
	
	function option:SetValue(value, enter)
		library.flags[self.flag] = tostring(value)
		self.value = tostring(value)
		inputvalue.Text = self.value
		self.callback(value, enter)
	end
end

local function loadOptions(option, holder)
	for _,newOption in next, option.options do
		if newOption.type == "label" then
			createLabel(newOption, option)
		elseif newOption.type == "toggle" then
			createToggle(newOption, option)
		elseif newOption.type == "button" then
			createButton(newOption, option)
		elseif newOption.type == "box" then
			createBox(newOption, option)
		elseif newOption.type == "description" then
			createDesc(newOption, option)
		end
	end
end

local function getFnctions(parent)
	function parent:AddLabel(option)
		option = typeof(option) == "table" and option or {}
		option.text = tostring(option.text)
		option.type = "label"
		option.position = #self.options
		library.options = library.options+1
		table.insert(self.options, option)
		
		return option
	end
	
	function parent:AddDescription(option)
		option = typeof(option) == "table" and option or {}
		option.text = tostring(option.text)
		option.type = "description"
		option.position = #self.options
		library.options = library.options+1
		table.insert(self.options, option)
		
		return option
	end
	
	function parent:AddToggle(option)
		option = typeof(option) == "table" and option or {}
		option.text = tostring(option.text)
		option.state = typeof(option.state) == "boolean" and option.state or false
		option.callback = typeof(option.callback) == "function" and option.callback or function() end
		option.type = "toggle"
		option.position = #self.options
		option.flag = option.flag or option.text
		library.flags[option.flag] = option.state
		library.options = library.options+1
		table.insert(self.options, option)
		
		return option
	end
	
	function parent:AddButton(option)
		option = typeof(option) == "table" and option or {}
		option.text = tostring(option.text)
		option.callback = typeof(option.callback) == "function" and option.callback or function() end
		option.type = "button"
		option.position = #self.options
		option.flag = option.flag or option.text
		library.options = library.options+1
		table.insert(self.options, option)
		
		return option
	end
	
	function parent:AddBox(option)
		option = typeof(option) == "table" and option or {}
		option.text = tostring(option.text)
		option.value = tostring(option.value or "")
		option.callback = typeof(option.callback) == "function" and option.callback or function() end
		option.type = "box"
		option.position = #self.options
		option.flag = option.flag or option.text
		library.flags[option.flag] = option.value
		library.options = library.options+1
		table.insert(self.options, option)
		
		return option
	end
end

function library:CreateWindow(title)
	local window = {title = tostring(title), options = {}, open = true, canInit = true, init = false, position = #self.windows}
	getFnctions(window)
	
	table.insert(library.windows, window)
	
	return window
end

local UIToggle
local UnlockMouse
function library:Init()
	
	self.base = self.base or self:Create("ScreenGui")
--[[	if syn and syn.protect_gui then
		syn.protect_gui(self.base)
	elseif get_hidden_gui then
		get_hidden_gui(self.base)
	else
		game:GetService"Players".LocalPlayer:Kick("Error: protect_gui function not found")
		return
	end]]
	self.base.Parent = game:GetService("CoreGui")
	self.base.Name = "uwuware"
	
	for _, window in next, self.windows do
		if window.canInit and not window.init then
			window.init = true
			createOptionHolder(window.title, self.base, window)
			loadOptions(window)
		end
	end
end

function library:Close()
	self.open = not self.open
	if self.activePopup then
		self.activePopup:Close()
	end
	for _, window in next, self.windows do
		if window.main then
			window.main.Visible = self.open
		end
	end
end

local mouse = game.Players.LocalPlayer:GetMouse()
mouse.KeyDown:Connect(function(key)
	if key:lower() == "p" then
		library:Close()
	end
end)

inputService.InputBegan:connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		if library.activePopup then
			if input.Position.X < library.activePopup.mainHolder.AbsolutePosition.X or input.Position.Y < library.activePopup.mainHolder.AbsolutePosition.Y then
				library.activePopup:Close()
			end
		end
		if library.activePopup then
			if input.Position.X > library.activePopup.mainHolder.AbsolutePosition.X + library.activePopup.mainHolder.AbsoluteSize.X or input.Position.Y > library.activePopup.mainHolder.AbsolutePosition.Y + library.activePopup.mainHolder.AbsoluteSize.Y then
				library.activePopup:Close()
			end
		end
	end
end)

inputService.InputChanged:connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)

return library
